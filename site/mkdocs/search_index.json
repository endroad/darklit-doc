{
    "docs": [
        {
            "location": "/",
            "text": "Welcome Darklit\n\n\nThis is online developper documentation for Darklit project.",
            "title": "Home"
        },
        {
            "location": "/#welcome-darklit",
            "text": "This is online developper documentation for Darklit project.",
            "title": "Welcome Darklit"
        },
        {
            "location": "/nsref.basics/",
            "text": "Basics\n\n\nDeclarations\n\n\nVariables\n\n\nPlain variables\n\n\nint a\nfloat b\n\n\n\nI / O\n\n\nSome variables can be retrieve or set from the C# code.\n\n\nTo use them you need to add \nin\n, \nout\n, \ninout\n in front of variable declaration\n\n\n    in int a\n    out float b\n    inout bool c\n\n\n\n\n\nTo know more about I/O usage see the script templates or consult your local programmer.\nSome scripts like \ncondition script\n requires special output variable\nto be functionnal\n\n\n\n\nEntity\n\n\nEach entity that you'll be using in your script need to be assigned from the C#\nside using a specific name. To make the link from C# to NuSpeak you need to declare it as follow:\n\n\nentity myEntity\n\n\n\n\n\nTo know more about entity usage see the script templates or consult your local programmer.\n\n\n\n\nReserved\n\n\nSome keyword are reserved by the language and/or the GameData framework to allow quick & easy access\nentities that are common.\n\n\n\n\n\n\n\n\nEntity Name\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nthis\n\n\nThe entity running the script.\n\n\n\n\n\n\nself\n\n\nSame as \nthis\n\n\n\n\n\n\ngame\n\n\nThe global game entity containing some useful generic stuff\n\n\n\n\n\n\n\n\nThe \nentities\n above are always defined and usable in any script.\n\n\nOperators\n\n\nArithmetics\n\n\nDefined for \nint\n and \nfloat\n\n\n// Binary\na + b // Addition\na - b // Substraction\na * b // Multiplication\na / b // Division\na % b // Modulo\n\n// Unary\na++   // Postfix increment\n++a   // Prefix increment\na--   // Postfix decrement\n--a   // Prefix decrement\n\n// Assignment\na += b\na -= b\n\n\n\nRelations\n\n\nDefined for \nint\n and \nfloat\n\n\nbool c = a > b  // Greater\nbool c = a >= b // Greater or equal\nbool c = a < b  // Less\nbool c = a <= b // Less or equal\n\n\n\nEquality\n\n\nDefined for \nbool\n, \nint\n and \nfloat\n\n\nbool c = a is b     // Equal\nbool c = a == b     // Equal (equiv.)\n\nbool c = a is not b // Not Equal\nbool c = a isnot b  // Not Equal (equiv.)\nbool c = a != b     // Not Equal (equiv.)\n\n\n\nLogic\n\n\nDefined for \nbool\n only\n\n\nbool c = a and b // And\nbool c = a && b  // And (equiv.)\n\nbool c = a or b  // Or\nbool c = a || b  // Or (equiv.)\n\nbool c = not a   // Not\nbool c = !a      // Not (equiv.)\n\n\n\nConditions\n\n\nif a is b then\n    // do something here ...\nendif\n\n\nif a is b then\n    // do somthing here\nelse if a is c then\n    // do some other thing here\nelse\n    // do some other other thing here\nend",
            "title": "Basics"
        },
        {
            "location": "/nsref.basics/#basics",
            "text": "",
            "title": "Basics"
        },
        {
            "location": "/nsref.basics/#declarations",
            "text": "",
            "title": "Declarations"
        },
        {
            "location": "/nsref.basics/#variables",
            "text": "Plain variables  int a\nfloat b",
            "title": "Variables"
        },
        {
            "location": "/nsref.basics/#i-o",
            "text": "Some variables can be retrieve or set from the C# code.  To use them you need to add  in ,  out ,  inout  in front of variable declaration      in int a\n    out float b\n    inout bool c   To know more about I/O usage see the script templates or consult your local programmer.\nSome scripts like  condition script  requires special output variable\nto be functionnal",
            "title": "I / O"
        },
        {
            "location": "/nsref.basics/#entity",
            "text": "Each entity that you'll be using in your script need to be assigned from the C#\nside using a specific name. To make the link from C# to NuSpeak you need to declare it as follow:  entity myEntity   To know more about entity usage see the script templates or consult your local programmer.",
            "title": "Entity"
        },
        {
            "location": "/nsref.basics/#reserved",
            "text": "Some keyword are reserved by the language and/or the GameData framework to allow quick & easy access\nentities that are common.     Entity Name  Usage      this  The entity running the script.    self  Same as  this    game  The global game entity containing some useful generic stuff     The  entities  above are always defined and usable in any script.",
            "title": "Reserved"
        },
        {
            "location": "/nsref.basics/#operators",
            "text": "",
            "title": "Operators"
        },
        {
            "location": "/nsref.basics/#arithmetics",
            "text": "Defined for  int  and  float  // Binary\na + b // Addition\na - b // Substraction\na * b // Multiplication\na / b // Division\na % b // Modulo\n\n// Unary\na++   // Postfix increment\n++a   // Prefix increment\na--   // Postfix decrement\n--a   // Prefix decrement\n\n// Assignment\na += b\na -= b",
            "title": "Arithmetics"
        },
        {
            "location": "/nsref.basics/#relations",
            "text": "Defined for  int  and  float  bool c = a > b  // Greater\nbool c = a >= b // Greater or equal\nbool c = a < b  // Less\nbool c = a <= b // Less or equal",
            "title": "Relations"
        },
        {
            "location": "/nsref.basics/#equality",
            "text": "Defined for  bool ,  int  and  float  bool c = a is b     // Equal\nbool c = a == b     // Equal (equiv.)\n\nbool c = a is not b // Not Equal\nbool c = a isnot b  // Not Equal (equiv.)\nbool c = a != b     // Not Equal (equiv.)",
            "title": "Equality"
        },
        {
            "location": "/nsref.basics/#logic",
            "text": "Defined for  bool  only  bool c = a and b // And\nbool c = a && b  // And (equiv.)\n\nbool c = a or b  // Or\nbool c = a || b  // Or (equiv.)\n\nbool c = not a   // Not\nbool c = !a      // Not (equiv.)",
            "title": "Logic"
        },
        {
            "location": "/nsref.basics/#conditions",
            "text": "if a is b then\n    // do something here ...\nendif\n\n\nif a is b then\n    // do somthing here\nelse if a is c then\n    // do some other thing here\nelse\n    // do some other other thing here\nend",
            "title": "Conditions"
        },
        {
            "location": "/nsref.ext/",
            "text": "External Access\n\n\nWorking with NuSpeak often will imply to retrieve or set value from/to C#, send message or event\netc... to affect gameplay.\nHere is how to do it.\n\n\nVariables\n\n\nAccess to variable is done using the operator \n->\n on an entity.\nThen followed by the name of the variable (always of the form \nclass.variableName\n)\n\n\nentity myObj\n\n// Read\nint a = myObj->health.life\n\n// Write\nmyObj->health.life = 42\n\n\n\nStats\n\n\nStatistics are equivalent to \nfloat\n variables with the differences that we can \nadd\n effects to theme\nYou can read and write it the same way you do with plain variables.\nHowever:\n\n\n\n\nReading a \nstat\n returns the value with all effects applied to it\n\n\nWriting a \nstat\n sets the \nbase value\n of the \nstat\n.\n\n\n\n\nYou can then add effect to \nstat\n from NuSpeak:\n\n\nentity myObj\nmyObj->health.regen add \"path/to/json\"\n\n\n\nMessages\n\n\nMessages\n are a form of interprocess communication to be able to send specific message to C# or an other NuSpeak script (see Globals for more details on that).\nMessages are send to an \nentity\n and share a lot of syntax with \nvariables\n and \nstats\n.\n\n\nSend the message \nhealth.kill\n that take no arguments\n\n\nentity myObj    \n[myObj health.kill]\n\n\n\nSend a message \nstamina.burst\n that takes 1 argument and returns whether or not it succeeded\n\n\nentity myObj    \nbool didBurst = [myObj stamina.burst: 5]\n\n\n\nSend a message \nhealth.heal\n that takes 2 arguments:\n\n\nentity myObj\n[myObj health.heal:5 overTime:2.0]\n\n\n\nEvents\n\n\nEvents share a lot with \nmessages\n. They have essentially the same syntax, except that the name of the message is \nevent\n\nand the value of the first argument is a \nstring\n with the event name:\n\n\n[this event:\"myAwesomeEvent\" myArgument:5.0]\n[this event:\"awesomeExplosion\" radius:10.0 duration:1.0]\n\n\n\nEvent's arguments are a convention build between the scripter (you!) and the receiver (either FX, Animation, Sound etc...).\nPassing a 'wrong' argument to an \nevent\n will not trigger an error but you might not get the expected result in the end\ndepending on how the \nevent\n is interpreted by the C# code or by another NuSpeak script.\n\n\nGlobals\n\n\nNuSpeak uses static type checking. Which is a fancy way to say that the \ntype\n (whether it's a \nint\n or \nfloat\n etc...) of an expression (let say \na + 4.0\n) is evaluated when you compile the program.\n\n\nHowever it's possible thanks to \nglobals\n to define \ndynamic\n \nvariables\n, \nstats\n or \nmessages\n per \nentity\n.\nThus the type of these dynamic data is unknown at when you compile the program (compile-time) (it's only known when you run the program on \nentity\n)\n\n\nSo... to be able to have correct types in your programs at compile-time you \nmust\n define the type all the \nglobals\n you'll be using in your NuSpeak script.\n\n\n\n\nIt's called a \nforward declaration\n\n\n\n\nIf I'm using in my script the \nglobal\n variable \nlifetime\n I've defined in a \nJson\n file I \nmust\n defined it like that:\n\n\nglobal float lifetime        // Forward definition of 'lifetime'\nthis->global.lifetime = 0    // Usage of 'lifetime'\n\n\n\nVariables & Stats\n\n\nglobal int victoryPoints\nglobal float lifetime\n\n// Statistic\nglobal stat strength\n\n\n\nMessages\n\n\nglobal (bool)doSomething:(int)\nglobal (void)doOtherThing:(int) withArgument:(float) lotOfArguments:(bool)",
            "title": "External"
        },
        {
            "location": "/nsref.ext/#external-access",
            "text": "Working with NuSpeak often will imply to retrieve or set value from/to C#, send message or event\netc... to affect gameplay.\nHere is how to do it.",
            "title": "External Access"
        },
        {
            "location": "/nsref.ext/#variables",
            "text": "Access to variable is done using the operator  ->  on an entity.\nThen followed by the name of the variable (always of the form  class.variableName )  entity myObj\n\n// Read\nint a = myObj->health.life\n\n// Write\nmyObj->health.life = 42",
            "title": "Variables"
        },
        {
            "location": "/nsref.ext/#stats",
            "text": "Statistics are equivalent to  float  variables with the differences that we can  add  effects to theme\nYou can read and write it the same way you do with plain variables.\nHowever:   Reading a  stat  returns the value with all effects applied to it  Writing a  stat  sets the  base value  of the  stat .   You can then add effect to  stat  from NuSpeak:  entity myObj\nmyObj->health.regen add \"path/to/json\"",
            "title": "Stats"
        },
        {
            "location": "/nsref.ext/#messages",
            "text": "Messages  are a form of interprocess communication to be able to send specific message to C# or an other NuSpeak script (see Globals for more details on that).\nMessages are send to an  entity  and share a lot of syntax with  variables  and  stats .  Send the message  health.kill  that take no arguments  entity myObj    \n[myObj health.kill]  Send a message  stamina.burst  that takes 1 argument and returns whether or not it succeeded  entity myObj    \nbool didBurst = [myObj stamina.burst: 5]  Send a message  health.heal  that takes 2 arguments:  entity myObj\n[myObj health.heal:5 overTime:2.0]",
            "title": "Messages"
        },
        {
            "location": "/nsref.ext/#events",
            "text": "Events share a lot with  messages . They have essentially the same syntax, except that the name of the message is  event \nand the value of the first argument is a  string  with the event name:  [this event:\"myAwesomeEvent\" myArgument:5.0]\n[this event:\"awesomeExplosion\" radius:10.0 duration:1.0]  Event's arguments are a convention build between the scripter (you!) and the receiver (either FX, Animation, Sound etc...).\nPassing a 'wrong' argument to an  event  will not trigger an error but you might not get the expected result in the end\ndepending on how the  event  is interpreted by the C# code or by another NuSpeak script.",
            "title": "Events"
        },
        {
            "location": "/nsref.ext/#globals",
            "text": "NuSpeak uses static type checking. Which is a fancy way to say that the  type  (whether it's a  int  or  float  etc...) of an expression (let say  a + 4.0 ) is evaluated when you compile the program.  However it's possible thanks to  globals  to define  dynamic   variables ,  stats  or  messages  per  entity .\nThus the type of these dynamic data is unknown at when you compile the program (compile-time) (it's only known when you run the program on  entity )  So... to be able to have correct types in your programs at compile-time you  must  define the type all the  globals  you'll be using in your NuSpeak script.   It's called a  forward declaration   If I'm using in my script the  global  variable  lifetime  I've defined in a  Json  file I  must  defined it like that:  global float lifetime        // Forward definition of 'lifetime'\nthis->global.lifetime = 0    // Usage of 'lifetime'",
            "title": "Globals"
        },
        {
            "location": "/nsref.ext/#variables-stats",
            "text": "global int victoryPoints\nglobal float lifetime\n\n// Statistic\nglobal stat strength",
            "title": "Variables &amp; Stats"
        },
        {
            "location": "/nsref.ext/#messages_1",
            "text": "global (bool)doSomething:(int)\nglobal (void)doOtherThing:(int) withArgument:(float) lotOfArguments:(bool)",
            "title": "Messages"
        },
        {
            "location": "/nsref.beh/",
            "text": "Behaviour\n\n\nRoutine loop\n\n\nIt's possible to define a \nloop\n in script that will \nyield\n the program execution.\nWhich means that when reaching the \nend\n of the \nloop\n, execution of the program will stop.\nNext time the program is run it will start again at the begginning of the \nloop\n.\n\n\nLet say we have the following script:\n\n\nint a = 0\nloop:\n    a = a + 1\nend\n\n\n\nWhen you run it the \nfirst\n time the value of \na\n will be:\n\n\na = 1\n\n\n\nWhen you run the same program a \nsecond time\n the value of \na\n will be:\n\n\na = 2\n\n\n\nAnd so on and so forth...\n\n\n\n\nLoop\n are used in behaviour script or scripts that are supposed to run every frame.\nHowever as a scripter you're not responsible of calling a script. It's the discretion\nof the programmer in charge to actually call the script when needed\nSo it's again a convention between programmer and scripter\n\n\n\n\nExit a loop\n\n\nYou can exit the parent loop at anytime using the instruction \n[exit]\n.\n\n\nint a = 0\nloop:\n    a = a + 1\n\n    if a >= 3 then\n        [exit]\n    end\nend\n\na = a * 2\n\n\n\nThe above script will exit the \nloop\n on the third run and then execute the code\n\n\na = a * 2\n\n\n\nThe resulting value of \na\n will be\n\n\na = 6\n\n\n\nYield\n\n\nYou can use the \n[yield]\n instruction to stop program execution and resume it to this point next time the program is run.\nAs a \nloop\n would do but this time you control the flow:\n\n\nint a = 42\n[yield]\na = 12\n\n\n\nWhen you run it the \nfirst\n time the value of \na\n will be:\n\n\na = 42\n\n\n\nWhen you run the same program a \nsecond time\n the value of \na\n will be:\n\n\na = 12\n\n\n\nAnd the second time the program will be terminated.\n\n\nState & Routine\n\n\nstate\n or \nroutine\n are code section where you can jump at at any point in your script using the instruction \nexec\n.\nIt's a convenience that allow scripter to split the code into parts that make sense.\n\n\nstate Fury:\n    this->legs.speed add \"CreatureEffects/FurySpeed\"\n    // Do some other stuff\nend\n\nloop:\n    if this->brain.playerDist < 3 then\n        [exec Fury]\n    end\nend\n\n\n\n\n\nYou can use indifferently keyword \nstate\n or \nroutine\n. They do the same thing",
            "title": "Behaviour"
        },
        {
            "location": "/nsref.beh/#behaviour",
            "text": "",
            "title": "Behaviour"
        },
        {
            "location": "/nsref.beh/#routine-loop",
            "text": "It's possible to define a  loop  in script that will  yield  the program execution.\nWhich means that when reaching the  end  of the  loop , execution of the program will stop.\nNext time the program is run it will start again at the begginning of the  loop .  Let say we have the following script:  int a = 0\nloop:\n    a = a + 1\nend  When you run it the  first  time the value of  a  will be:  a = 1  When you run the same program a  second time  the value of  a  will be:  a = 2  And so on and so forth...   Loop  are used in behaviour script or scripts that are supposed to run every frame.\nHowever as a scripter you're not responsible of calling a script. It's the discretion\nof the programmer in charge to actually call the script when needed\nSo it's again a convention between programmer and scripter",
            "title": "Routine loop"
        },
        {
            "location": "/nsref.beh/#exit-a-loop",
            "text": "You can exit the parent loop at anytime using the instruction  [exit] .  int a = 0\nloop:\n    a = a + 1\n\n    if a >= 3 then\n        [exit]\n    end\nend\n\na = a * 2  The above script will exit the  loop  on the third run and then execute the code  a = a * 2  The resulting value of  a  will be  a = 6",
            "title": "Exit a loop"
        },
        {
            "location": "/nsref.beh/#yield",
            "text": "You can use the  [yield]  instruction to stop program execution and resume it to this point next time the program is run.\nAs a  loop  would do but this time you control the flow:  int a = 42\n[yield]\na = 12  When you run it the  first  time the value of  a  will be:  a = 42  When you run the same program a  second time  the value of  a  will be:  a = 12  And the second time the program will be terminated.",
            "title": "Yield"
        },
        {
            "location": "/nsref.beh/#state-routine",
            "text": "state  or  routine  are code section where you can jump at at any point in your script using the instruction  exec .\nIt's a convenience that allow scripter to split the code into parts that make sense.  state Fury:\n    this->legs.speed add \"CreatureEffects/FurySpeed\"\n    // Do some other stuff\nend\n\nloop:\n    if this->brain.playerDist < 3 then\n        [exec Fury]\n    end\nend   You can use indifferently keyword  state  or  routine . They do the same thing",
            "title": "State &amp; Routine"
        },
        {
            "location": "/stemp.AOE/",
            "text": "Areas of effect, as a component, works with 2 scripts:\n\n\nAOE Update Template\n\n\nIt is ran on every frame one single time until it exits,\nit is mainly used to define if the effect will be ran on this frame,\nit is there to say if the AOE will do something.\n\n\n\n\n\n\n\n\nI/O\n\n\nType\n\n\nName\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nout\n\n\nbool\n\n\nexecute\n\n\nwill execute the AOE effect\n\n\n\n\n\n\n\n\nExemple : A script that activate the effect once per second\n\n\nscript: OncePerSecond\n\n  out bool execute\n  float timer = 0\n  float duration = 1\n\n  loop:\n    if timer > duration then\n      execute = true\n      timer = 0\n    else\n      execute = false\n      timer = timer + game->time.dt\n    end\n  end\n\nendscript\n\n\n\nAOE Effect Template\n\n\nShould the update script returns as 'true' for 'execute', the effect script will be ran\nfor every entity in the defined zone.\n\n\n\n\n\n\n\n\nI/O\n\n\nType\n\n\nName\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nin\n\n\nentity\n\n\nother\n\n\nthe entity affected by the AOE\n\n\n\n\n\n\n\n\nExemple : A script that does stamina damage in one go\n\n\nscript: StaminaDamage\n\n  entity other\n  [other stamina.damage: 15]\n\nendscript",
            "title": "AOE"
        },
        {
            "location": "/stemp.AOE/#aoe-update-template",
            "text": "It is ran on every frame one single time until it exits,\nit is mainly used to define if the effect will be ran on this frame,\nit is there to say if the AOE will do something.     I/O  Type  Name  Comments      out  bool  execute  will execute the AOE effect",
            "title": "AOE Update Template"
        },
        {
            "location": "/stemp.AOE/#exemple-a-script-that-activate-the-effect-once-per-second",
            "text": "script: OncePerSecond\n\n  out bool execute\n  float timer = 0\n  float duration = 1\n\n  loop:\n    if timer > duration then\n      execute = true\n      timer = 0\n    else\n      execute = false\n      timer = timer + game->time.dt\n    end\n  end\n\nendscript",
            "title": "Exemple : A script that activate the effect once per second"
        },
        {
            "location": "/stemp.AOE/#aoe-effect-template",
            "text": "Should the update script returns as 'true' for 'execute', the effect script will be ran\nfor every entity in the defined zone.     I/O  Type  Name  Comments      in  entity  other  the entity affected by the AOE",
            "title": "AOE Effect Template"
        },
        {
            "location": "/stemp.AOE/#exemple-a-script-that-does-stamina-damage-in-one-go",
            "text": "script: StaminaDamage\n\n  entity other\n  [other stamina.damage: 15]\n\nendscript",
            "title": "Exemple : A script that does stamina damage in one go"
        },
        {
            "location": "/stemp.cond/",
            "text": "Condition Template\n\n\nUsed to evaluate a condition.\n\n\n\n\n\n\n\n\nI/O\n\n\nType\n\n\nName\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nout\n\n\nbool\n\n\ncondition\n\n\nEvaluated condition",
            "title": "Condition"
        },
        {
            "location": "/stemp.cond/#condition-template",
            "text": "Used to evaluate a condition.     I/O  Type  Name  Comments      out  bool  condition  Evaluated condition",
            "title": "Condition Template"
        },
        {
            "location": "/stemp.effect/",
            "text": "Effect Template\n\n\nUsed to compute an effect.\n\n\n\n\n\n\n\n\nI/O\n\n\nType\n\n\nName\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nin\n\n\nfloat\n\n\ninput\n\n\nBase value\n\n\n\n\n\n\nout\n\n\nfloat\n\n\noutput\n\n\nValue modified by effect",
            "title": "Effect"
        },
        {
            "location": "/stemp.effect/#effect-template",
            "text": "Used to compute an effect.     I/O  Type  Name  Comments      in  float  input  Base value    out  float  output  Value modified by effect",
            "title": "Effect Template"
        },
        {
            "location": "/stemp.beh/",
            "text": "Behaviour Template\n\n\nBehaviour scripts are executed each frame.\nYou can then write whatever you want.\n\n\nThe usage of \nstate\n and  \nloop\n is espescially recommanded.\n\n\nExample:\n\n\nfloat time = 0\n\nloop:\n    time = time + game->time.dt\n\n    if time >= 3.0 then\n        [this event:\"SomeEffect\"]\n        time = 0\n    end\nend",
            "title": "Behaviour"
        },
        {
            "location": "/stemp.beh/#behaviour-template",
            "text": "Behaviour scripts are executed each frame.\nYou can then write whatever you want.  The usage of  state  and   loop  is espescially recommanded.  Example:  float time = 0\n\nloop:\n    time = time + game->time.dt\n\n    if time >= 3.0 then\n        [this event:\"SomeEffect\"]\n        time = 0\n    end\nend",
            "title": "Behaviour Template"
        },
        {
            "location": "/stemp.spawner/",
            "text": "Spawner Template\n\n\nSpawner is executed every frame while the program \nyield\n (that is inside a loop or after \n[yield]\n instructions).\nIt requires the amount of item to spawn.\n\n\n\n\n\n\n\n\nI/O\n\n\nType\n\n\nName\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nout\n\n\nint\n\n\nburst\n\n\nNumber of object to spawn\n\n\n\n\n\n\nout\n\n\nfloat\n\n\nprogress\n\n\nFeedback the progression of the spawning process between 0 and 1. The value is then used on jauges or progress bars to show spawning advancement\n\n\n\n\n\n\n\n\nExample: One every 60s\n\n\nout int burst = 0\nint time = 0\nloop:\n    burst = 0\n    time = time + game->time.dt\n    if time >= 60 then\n        burst = 1\n    end\nend\n\n\n\nExample: One every 60s v2\n\n\nStops after spawning \n10\n\n\nout int burst = 0\nint time = 0\nint count = 0\nloop:\n    burst = 0\n    time = time + game->time.dt\n    if time >= 60 then\n        burst = 1\n        count = count + 1\n    end\n\n    if count >= 10 then\n        [exit]\n    end\nend",
            "title": "Spawner"
        },
        {
            "location": "/stemp.spawner/#spawner-template",
            "text": "Spawner is executed every frame while the program  yield  (that is inside a loop or after  [yield]  instructions).\nIt requires the amount of item to spawn.     I/O  Type  Name  Comments      out  int  burst  Number of object to spawn    out  float  progress  Feedback the progression of the spawning process between 0 and 1. The value is then used on jauges or progress bars to show spawning advancement",
            "title": "Spawner Template"
        },
        {
            "location": "/stemp.spawner/#example-one-every-60s",
            "text": "out int burst = 0\nint time = 0\nloop:\n    burst = 0\n    time = time + game->time.dt\n    if time >= 60 then\n        burst = 1\n    end\nend",
            "title": "Example: One every 60s"
        },
        {
            "location": "/stemp.spawner/#example-one-every-60s-v2",
            "text": "Stops after spawning  10  out int burst = 0\nint time = 0\nint count = 0\nloop:\n    burst = 0\n    time = time + game->time.dt\n    if time >= 60 then\n        burst = 1\n        count = count + 1\n    end\n\n    if count >= 10 then\n        [exit]\n    end\nend",
            "title": "Example: One every 60s v2"
        },
        {
            "location": "/jsontemp.cond/",
            "text": "Condition\n\n\nMuch like any programming language, conditions are used to gate a process (such as triggering an action) using boolean expressions\n\n\nRequired Parameters\n\n\ntype : string\n\n\ncan recieve the following values\n\n\n\"compound\"      //Multiple Conditions\n\"data\"          //Compare GameData with constant\n\"time\"          //Chrono, beware as it only runs when the condition is evaluated\n\n\n\nData Parameters\n\n\nparameters that are specific to the Data type Condition\n\n\nop : string (REQUIRED)\n\n\noperator for condition , can recieve the following values\n\n\n\"less\",\n\"lessorequal\", \"lequal\",\n\"greater\",\n\"greaterorequal\", \"gequal\",\n\"equal\",\n\"notequal\", \"nequal\"\n\n\n\nleft : GameData (REQUIRED)\n\n\nthe gamedata on the left of the expression\n\n\nright : value (REQUIRED)\n\n\nvalue which type depends on the game data compared with\n\n\nCompound Parameters\n\n\nop : string (REQUIRED)\n\n\noperator for condition , can recieve the following values\n\n\n\"and\",          // requires all conditions to be true, evalution will stop at first faillure\n\"or\",           // requires one condition to be true, evalution will stop at first success\n\"not\"\n\n\n\n0 : Condition (REQUIRED)\n\n\ndefines the first condition, note that it starts a new Condition descriptor\n\n\n1 : Condition\n\n\ndefines the second condition, it is unnecessarary for \"not\" operator\n\n\n... : Condition\n\n\nsubsequent conditions, would be pretty dumb to be limited to 2 using same operator, right ? Just don't forget to increment the value\n\n\nTime Parameters\n\n\nduration : float(REQUIRED)\n\n\nfloat that acts as the chrono threshold",
            "title": "Condition"
        },
        {
            "location": "/jsontemp.cond/#condition",
            "text": "Much like any programming language, conditions are used to gate a process (such as triggering an action) using boolean expressions",
            "title": "Condition"
        },
        {
            "location": "/jsontemp.cond/#required-parameters",
            "text": "",
            "title": "Required Parameters"
        },
        {
            "location": "/jsontemp.cond/#type-string",
            "text": "can recieve the following values  \"compound\"      //Multiple Conditions\n\"data\"          //Compare GameData with constant\n\"time\"          //Chrono, beware as it only runs when the condition is evaluated",
            "title": "type : string"
        },
        {
            "location": "/jsontemp.cond/#data-parameters",
            "text": "parameters that are specific to the Data type Condition",
            "title": "Data Parameters"
        },
        {
            "location": "/jsontemp.cond/#op-string-required",
            "text": "operator for condition , can recieve the following values  \"less\",\n\"lessorequal\", \"lequal\",\n\"greater\",\n\"greaterorequal\", \"gequal\",\n\"equal\",\n\"notequal\", \"nequal\"",
            "title": "op : string (REQUIRED)"
        },
        {
            "location": "/jsontemp.cond/#left-gamedata-required",
            "text": "the gamedata on the left of the expression",
            "title": "left : GameData (REQUIRED)"
        },
        {
            "location": "/jsontemp.cond/#right-value-required",
            "text": "value which type depends on the game data compared with",
            "title": "right : value (REQUIRED)"
        },
        {
            "location": "/jsontemp.cond/#compound-parameters",
            "text": "",
            "title": "Compound Parameters"
        },
        {
            "location": "/jsontemp.cond/#op-string-required_1",
            "text": "operator for condition , can recieve the following values  \"and\",          // requires all conditions to be true, evalution will stop at first faillure\n\"or\",           // requires one condition to be true, evalution will stop at first success\n\"not\"",
            "title": "op : string (REQUIRED)"
        },
        {
            "location": "/jsontemp.cond/#0-condition-required",
            "text": "defines the first condition, note that it starts a new Condition descriptor",
            "title": "0 : Condition (REQUIRED)"
        },
        {
            "location": "/jsontemp.cond/#1-condition",
            "text": "defines the second condition, it is unnecessarary for \"not\" operator",
            "title": "1 : Condition"
        },
        {
            "location": "/jsontemp.cond/#condition_1",
            "text": "subsequent conditions, would be pretty dumb to be limited to 2 using same operator, right ? Just don't forget to increment the value",
            "title": "... : Condition"
        },
        {
            "location": "/jsontemp.cond/#time-parameters",
            "text": "",
            "title": "Time Parameters"
        },
        {
            "location": "/jsontemp.cond/#duration-floatrequired",
            "text": "float that acts as the chrono threshold",
            "title": "duration : float(REQUIRED)"
        },
        {
            "location": "/commands.game/",
            "text": "Developpers Commands\n\n\nfly\n\n\nSwitch flycam mode on and off\n\n\nfly\n\n\n\narchetype\n\n\nLoad an archetype \nmyArchetype\n on the player. This a path to JSon.\n\n\narchetype myArchetype\n\n\n\nrespawn\n\n\nRespawn the player to last respawn point\n\n\nrespawn\n\n\n\nzombie\n\n\nEnable or disable the zombie mode\n\n\nzombie [on|off]",
            "title": "Game"
        },
        {
            "location": "/commands.game/#developpers-commands",
            "text": "",
            "title": "Developpers Commands"
        },
        {
            "location": "/commands.game/#fly",
            "text": "Switch flycam mode on and off  fly",
            "title": "fly"
        },
        {
            "location": "/commands.game/#archetype",
            "text": "Load an archetype  myArchetype  on the player. This a path to JSon.  archetype myArchetype",
            "title": "archetype"
        },
        {
            "location": "/commands.game/#respawn",
            "text": "Respawn the player to last respawn point  respawn",
            "title": "respawn"
        },
        {
            "location": "/commands.game/#zombie",
            "text": "Enable or disable the zombie mode  zombie [on|off]",
            "title": "zombie"
        },
        {
            "location": "/commands.dev/",
            "text": "Developpers Commands\n\n\ndatabase\n\n\ndatabase [flush | reload] [--all]\n\n\n\nflush\n Flush from the database\n\n\nreload\n Reload into the database\n\n\n--all\n Apply operation to all known data tree\n\n\nExamples\n\n\ndatabase flush --all  // flush all\ndatabase reload --all // reload all\n\n\n\nnu\n\n\nnu [dump [--irtree|--ircode|--parsetree|--symbols] [--all] [programName]]\n\n\n\ndump\n Dump program info\n\n\n--irtree\n Dump IR Tree (AST)\n\n\n--ircode\n Dump IR Code\n\n\n--parsetree\n Dump parse tree\n\n\n--symbols\n Dump debug symbols\n\n\n--all\n Apply dump to all programs\n\n\nExamples\n\n\nnu dump --ircode --all               // dump ir code of all programs\nnu dump --irtree --parsetree --all   // dump IR tree and parse tree of all programs\nnu dump --irtree \"MyFile/MyProgram\"  // dump IR tree of MyProgram located in MyFile.ns",
            "title": "Dev"
        },
        {
            "location": "/commands.dev/#developpers-commands",
            "text": "",
            "title": "Developpers Commands"
        },
        {
            "location": "/commands.dev/#database",
            "text": "database [flush | reload] [--all]  flush  Flush from the database  reload  Reload into the database  --all  Apply operation to all known data tree",
            "title": "database"
        },
        {
            "location": "/commands.dev/#examples",
            "text": "database flush --all  // flush all\ndatabase reload --all // reload all",
            "title": "Examples"
        },
        {
            "location": "/commands.dev/#nu",
            "text": "nu [dump [--irtree|--ircode|--parsetree|--symbols] [--all] [programName]]  dump  Dump program info  --irtree  Dump IR Tree (AST)  --ircode  Dump IR Code  --parsetree  Dump parse tree  --symbols  Dump debug symbols  --all  Apply dump to all programs",
            "title": "nu"
        },
        {
            "location": "/commands.dev/#examples_1",
            "text": "nu dump --ircode --all               // dump ir code of all programs\nnu dump --irtree --parsetree --all   // dump IR tree and parse tree of all programs\nnu dump --irtree \"MyFile/MyProgram\"  // dump IR tree of MyProgram located in MyFile.ns",
            "title": "Examples"
        },
        {
            "location": "/gameData/gameObject/",
            "text": "gameObject\n\n\nVariables\n\n\ngameObject.isActive\n\n\nbool gameObject.isActive\n\n\nReturns if the object is active.\n\n\ngameObject.isActiveInHierarchy\n\n\nbool gameObject.isActiveInHierarchy\n\n\nIs the GameObject active in the scene?\n\n\nStats\n\n\nMessage\n\n\ngameObject.destroyWithDelay\n\n\n(void)gameObject.destroyWithDelay:(float)delay\n\nDestroy with a specific delay.\n\n\nArguments\n\n\nfloat delay\n: Duration in second to wait before destroying\n\n\nReturns\n\n\nN/A\n\n\ngameObject.destroy\n\n\n(void)gameObject.destroy\n\nUndocumented\n\n\ngameObject.setLayer\n\n\n(void)gameObject.setLayer:(string)layerName\n\nchange the game object physic layer, which affects the world collision\n\n\nArguments\n\n\nstring layerName\n: name of the new layer\n\n\nReturns\n\n\nN/A",
            "title": "gameObject"
        },
        {
            "location": "/gameData/gameObject/#gameobject",
            "text": "",
            "title": "gameObject"
        },
        {
            "location": "/gameData/gameObject/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/gameObject/#gameobjectisactive",
            "text": "bool gameObject.isActive  Returns if the object is active.",
            "title": "gameObject.isActive"
        },
        {
            "location": "/gameData/gameObject/#gameobjectisactiveinhierarchy",
            "text": "bool gameObject.isActiveInHierarchy  Is the GameObject active in the scene?",
            "title": "gameObject.isActiveInHierarchy"
        },
        {
            "location": "/gameData/gameObject/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/gameObject/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/gameObject/#gameobjectdestroywithdelay",
            "text": "(void)gameObject.destroyWithDelay:(float)delay \nDestroy with a specific delay.",
            "title": "gameObject.destroyWithDelay"
        },
        {
            "location": "/gameData/gameObject/#arguments",
            "text": "float delay : Duration in second to wait before destroying",
            "title": "Arguments"
        },
        {
            "location": "/gameData/gameObject/#returns",
            "text": "N/A",
            "title": "Returns"
        },
        {
            "location": "/gameData/gameObject/#gameobjectdestroy",
            "text": "(void)gameObject.destroy \nUndocumented",
            "title": "gameObject.destroy"
        },
        {
            "location": "/gameData/gameObject/#gameobjectsetlayer",
            "text": "(void)gameObject.setLayer:(string)layerName \nchange the game object physic layer, which affects the world collision",
            "title": "gameObject.setLayer"
        },
        {
            "location": "/gameData/gameObject/#arguments_1",
            "text": "string layerName : name of the new layer",
            "title": "Arguments"
        },
        {
            "location": "/gameData/gameObject/#returns_1",
            "text": "N/A",
            "title": "Returns"
        },
        {
            "location": "/gameData/net/",
            "text": "net\n\n\nVariables\n\n\nnet.hasAutority\n\n\nbool net.hasAutority\n\n\nThis returns true if this object is the authoritative version of the object in the distributed network application.\n\n\nnet.isServer\n\n\nbool net.isServer\n\n\nReturns true if this object is active on an active server.\n\n\nnet.isClient\n\n\nbool net.isClient\n\n\nReturns true if running as a client and this object was spawned by a server.\n\n\nnet.isLocalPlayer\n\n\nbool net.isLocalPlayer\n\n\nReturns\n\n\nStats\n\n\nMessage",
            "title": "net"
        },
        {
            "location": "/gameData/net/#net",
            "text": "",
            "title": "net"
        },
        {
            "location": "/gameData/net/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/net/#nethasautority",
            "text": "bool net.hasAutority  This returns true if this object is the authoritative version of the object in the distributed network application.",
            "title": "net.hasAutority"
        },
        {
            "location": "/gameData/net/#netisserver",
            "text": "bool net.isServer  Returns true if this object is active on an active server.",
            "title": "net.isServer"
        },
        {
            "location": "/gameData/net/#netisclient",
            "text": "bool net.isClient  Returns true if running as a client and this object was spawned by a server.",
            "title": "net.isClient"
        },
        {
            "location": "/gameData/net/#netislocalplayer",
            "text": "bool net.isLocalPlayer  Returns",
            "title": "net.isLocalPlayer"
        },
        {
            "location": "/gameData/net/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/net/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/random/",
            "text": "random\n\n\nVariables\n\n\nrandom.value\n\n\nfloat random.value\n\n\nget a random float value between 0 and 1\n\n\nStats\n\n\nMessage\n\n\nrandom.range\n\n\n(float)random.range:(float)min max:(float)max\n\nget a random float value between min and max\n\n\nArguments\n\n\nfloat min\n: minimal float value\n\n\nfloat max\n: maximal float value\n\n\nReturns\n\n\nreturn the random float\n\n\nrandom.rangeInt\n\n\n(int)random.rangeInt:(int)min max:(int)max\n\nsame as range but with integers\n\n\nArguments\n\n\nint min\n: minimal int value (inclusive)\n\n\nint max\n: maximal int value (also inclusive)\n\n\nReturns\n\n\nreturn the random integer",
            "title": "random"
        },
        {
            "location": "/gameData/random/#random",
            "text": "",
            "title": "random"
        },
        {
            "location": "/gameData/random/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/random/#randomvalue",
            "text": "float random.value  get a random float value between 0 and 1",
            "title": "random.value"
        },
        {
            "location": "/gameData/random/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/random/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/random/#randomrange",
            "text": "(float)random.range:(float)min max:(float)max \nget a random float value between min and max",
            "title": "random.range"
        },
        {
            "location": "/gameData/random/#arguments",
            "text": "float min : minimal float value  float max : maximal float value",
            "title": "Arguments"
        },
        {
            "location": "/gameData/random/#returns",
            "text": "return the random float",
            "title": "Returns"
        },
        {
            "location": "/gameData/random/#randomrangeint",
            "text": "(int)random.rangeInt:(int)min max:(int)max \nsame as range but with integers",
            "title": "random.rangeInt"
        },
        {
            "location": "/gameData/random/#arguments_1",
            "text": "int min : minimal int value (inclusive)  int max : maximal int value (also inclusive)",
            "title": "Arguments"
        },
        {
            "location": "/gameData/random/#returns_1",
            "text": "return the random integer",
            "title": "Returns"
        },
        {
            "location": "/gameData/time/",
            "text": "time\n\n\nVariables\n\n\ntime.dt\n\n\nfloat time.dt\n\n\nTime interval since last frame.\n\n\nStats\n\n\nMessage",
            "title": "time"
        },
        {
            "location": "/gameData/time/#time",
            "text": "",
            "title": "time"
        },
        {
            "location": "/gameData/time/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/time/#timedt",
            "text": "float time.dt  Time interval since last frame.",
            "title": "time.dt"
        },
        {
            "location": "/gameData/time/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/time/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/transform/",
            "text": "transform\n\n\nVariables\n\n\ntransform.posx\n\n\nfloat transform.posx\n\n\nUndocumented\n\n\ntransform.posy\n\n\nfloat transform.posy\n\n\nUndocumented\n\n\ntransform.posz\n\n\nfloat transform.posz\n\n\nUndocumented\n\n\nStats\n\n\nMessage",
            "title": "transform"
        },
        {
            "location": "/gameData/transform/#transform",
            "text": "",
            "title": "transform"
        },
        {
            "location": "/gameData/transform/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/transform/#transformposx",
            "text": "float transform.posx  Undocumented",
            "title": "transform.posx"
        },
        {
            "location": "/gameData/transform/#transformposy",
            "text": "float transform.posy  Undocumented",
            "title": "transform.posy"
        },
        {
            "location": "/gameData/transform/#transformposz",
            "text": "float transform.posz  Undocumented",
            "title": "transform.posz"
        },
        {
            "location": "/gameData/transform/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/transform/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/__vmtest/",
            "text": "__vmtest\n\n\nVariables\n\n\n__vmtest.myInt\n\n\nint __vmtest.myInt\n\n\nUndocumented\n\n\n__vmtest.myFloat\n\n\nint __vmtest.myFloat\n\n\nUndocumented\n\n\nStats\n\n\nMessage\n\n\n__vmtest.mySubstractionMessage\n\n\n(float)__vmtest.mySubstractionMessage:(int)a b:(float)b\n\nHello Workd\n\n\nArguments\n\n\nint a\n: Some usage\n\n\nfloat b\n: Some other\n\n\nReturns\n\n\nSome last",
            "title": "__vmtest"
        },
        {
            "location": "/gameData/__vmtest/#__vmtest",
            "text": "",
            "title": "__vmtest"
        },
        {
            "location": "/gameData/__vmtest/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/__vmtest/#__vmtestmyint",
            "text": "int __vmtest.myInt  Undocumented",
            "title": "__vmtest.myInt"
        },
        {
            "location": "/gameData/__vmtest/#__vmtestmyfloat",
            "text": "int __vmtest.myFloat  Undocumented",
            "title": "__vmtest.myFloat"
        },
        {
            "location": "/gameData/__vmtest/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/__vmtest/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/__vmtest/#__vmtestmysubstractionmessage",
            "text": "(float)__vmtest.mySubstractionMessage:(int)a b:(float)b \nHello Workd",
            "title": "__vmtest.mySubstractionMessage"
        },
        {
            "location": "/gameData/__vmtest/#arguments",
            "text": "int a : Some usage  float b : Some other",
            "title": "Arguments"
        },
        {
            "location": "/gameData/__vmtest/#returns",
            "text": "Some last",
            "title": "Returns"
        },
        {
            "location": "/gameData/spawner/",
            "text": "spawner\n\n\nVariables\n\n\nspawner.local\n\n\nbool spawner.local\n\n\nWhether or not the spawn is local to\n            the current entity.\n\n\nspawner.descriptor\n\n\nstring spawner.descriptor\n\n\nDescriptor to spawn.\n            If starts with \ndata:\n the rest will be interpreted as a json path\n            if starts with \nprefab:\n it's a name of a registered prefab\n            by default it's a prefab.\n\n\nspawner.script\n\n\nstring spawner.script\n\n\nScript that runs continuously to spawn over time.\n\n\nStats\n\n\nMessage\n\n\nspawner.burst\n\n\n(void)spawner.burst:(int)count\n\nSpawn several item.\n\n\nArguments\n\n\nint count\n: Amount to spawn.\n\n\nReturns\n\n\nN/A\n\n\nspawner.spawn\n\n\n(void)spawner.spawn\n\nUndocumented\n\n\nspawner.reset\n\n\n(void)spawner.reset\n\nUndocumented",
            "title": "spawner"
        },
        {
            "location": "/gameData/spawner/#spawner",
            "text": "",
            "title": "spawner"
        },
        {
            "location": "/gameData/spawner/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/spawner/#spawnerlocal",
            "text": "bool spawner.local  Whether or not the spawn is local to\n            the current entity.",
            "title": "spawner.local"
        },
        {
            "location": "/gameData/spawner/#spawnerdescriptor",
            "text": "string spawner.descriptor  Descriptor to spawn.\n            If starts with  data:  the rest will be interpreted as a json path\n            if starts with  prefab:  it's a name of a registered prefab\n            by default it's a prefab.",
            "title": "spawner.descriptor"
        },
        {
            "location": "/gameData/spawner/#spawnerscript",
            "text": "string spawner.script  Script that runs continuously to spawn over time.",
            "title": "spawner.script"
        },
        {
            "location": "/gameData/spawner/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/spawner/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/spawner/#spawnerburst",
            "text": "(void)spawner.burst:(int)count \nSpawn several item.",
            "title": "spawner.burst"
        },
        {
            "location": "/gameData/spawner/#arguments",
            "text": "int count : Amount to spawn.",
            "title": "Arguments"
        },
        {
            "location": "/gameData/spawner/#returns",
            "text": "N/A",
            "title": "Returns"
        },
        {
            "location": "/gameData/spawner/#spawnerspawn",
            "text": "(void)spawner.spawn \nUndocumented",
            "title": "spawner.spawn"
        },
        {
            "location": "/gameData/spawner/#spawnerreset",
            "text": "(void)spawner.reset \nUndocumented",
            "title": "spawner.reset"
        },
        {
            "location": "/gameData/aoes/",
            "text": "aoes\n\n\nVariables\n\n\nStats\n\n\nMessage\n\n\naoes.run\n\n\n(void)aoes.run:(string)keyid\n\nStart or restart the update script.\n\n\nArguments\n\n\nstring keyid\n: N/A\n\n\nReturns\n\n\nN/A\n\n\naoes.resume\n\n\n(void)aoes.resume:(string)keyid\n\nResume execution of update script.\n\n\nArguments\n\n\nstring keyid\n: N/A\n\n\nReturns\n\n\nN/A\n\n\naoes.stop\n\n\n(void)aoes.stop:(string)keyid\n\nStop execution of update script.\n\n\nArguments\n\n\nstring keyid\n: N/A\n\n\nReturns\n\n\nN/A",
            "title": "aoes"
        },
        {
            "location": "/gameData/aoes/#aoes",
            "text": "",
            "title": "aoes"
        },
        {
            "location": "/gameData/aoes/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/aoes/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/aoes/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/aoes/#aoesrun",
            "text": "(void)aoes.run:(string)keyid \nStart or restart the update script.",
            "title": "aoes.run"
        },
        {
            "location": "/gameData/aoes/#arguments",
            "text": "string keyid : N/A",
            "title": "Arguments"
        },
        {
            "location": "/gameData/aoes/#returns",
            "text": "N/A",
            "title": "Returns"
        },
        {
            "location": "/gameData/aoes/#aoesresume",
            "text": "(void)aoes.resume:(string)keyid \nResume execution of update script.",
            "title": "aoes.resume"
        },
        {
            "location": "/gameData/aoes/#arguments_1",
            "text": "string keyid : N/A",
            "title": "Arguments"
        },
        {
            "location": "/gameData/aoes/#returns_1",
            "text": "N/A",
            "title": "Returns"
        },
        {
            "location": "/gameData/aoes/#aoesstop",
            "text": "(void)aoes.stop:(string)keyid \nStop execution of update script.",
            "title": "aoes.stop"
        },
        {
            "location": "/gameData/aoes/#arguments_2",
            "text": "string keyid : N/A",
            "title": "Arguments"
        },
        {
            "location": "/gameData/aoes/#returns_2",
            "text": "N/A",
            "title": "Returns"
        },
        {
            "location": "/gameData/attack/",
            "text": "attack\n\n\nVariables\n\n\nStats\n\n\nattack.damage\n\n\nfloat attack.damage\n\n\nUndocumented\n\n\nMessage\n\n\nattack.hit\n\n\n(void)attack.hit:(int)id\n\nUndocumented",
            "title": "attack"
        },
        {
            "location": "/gameData/attack/#attack",
            "text": "",
            "title": "attack"
        },
        {
            "location": "/gameData/attack/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/attack/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/attack/#attackdamage",
            "text": "float attack.damage  Undocumented",
            "title": "attack.damage"
        },
        {
            "location": "/gameData/attack/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/attack/#attackhit",
            "text": "(void)attack.hit:(int)id \nUndocumented",
            "title": "attack.hit"
        },
        {
            "location": "/gameData/Character/",
            "text": "Character\n\n\nVariables\n\n\nCharacter.vulnerable\n\n\nbool Character.vulnerable\n\n\na boolean to know if the character can recieve hit damage\n\n\nStats\n\n\nCharacter.Damage\n\n\nfloat Character.Damage\n\n\nUndocumented\n\n\nCharacter.Gravity\n\n\nfloat Character.Gravity\n\n\nUndocumented\n\n\nCharacter.Motion\n\n\nfloat Character.Motion\n\n\nUndocumented\n\n\nCharacter.KnockDamp\n\n\nfloat Character.KnockDamp\n\n\nUndocumented\n\n\nMessage\n\n\nCharacter.UpwardBoost\n\n\n(void)Character.UpwardBoost:(float)boost\n\nUndocumented\n\n\nCharacter.SetInvincible\n\n\n(void)Character.SetInvincible:(float)duration\n\nUndocumented\n\n\nCharacter.Knock\n\n\n(void)Character.Knock:(float)strengh x:(float)x y:(float)y z:(float)z\n\nknock the creature, impose a locomotion force that cannot be opposed with conscient locomotion (like walking)\n            all you need is strengh and origin\n\n\nArguments\n\n\nfloat strengh\n: \n\n\nfloat x\n: \n\n\nfloat y\n: \n\n\nfloat z\n: \n\n\nReturns\n\n\nN/A",
            "title": "Character"
        },
        {
            "location": "/gameData/Character/#character",
            "text": "",
            "title": "Character"
        },
        {
            "location": "/gameData/Character/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/Character/#charactervulnerable",
            "text": "bool Character.vulnerable  a boolean to know if the character can recieve hit damage",
            "title": "Character.vulnerable"
        },
        {
            "location": "/gameData/Character/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/Character/#characterdamage",
            "text": "float Character.Damage  Undocumented",
            "title": "Character.Damage"
        },
        {
            "location": "/gameData/Character/#charactergravity",
            "text": "float Character.Gravity  Undocumented",
            "title": "Character.Gravity"
        },
        {
            "location": "/gameData/Character/#charactermotion",
            "text": "float Character.Motion  Undocumented",
            "title": "Character.Motion"
        },
        {
            "location": "/gameData/Character/#characterknockdamp",
            "text": "float Character.KnockDamp  Undocumented",
            "title": "Character.KnockDamp"
        },
        {
            "location": "/gameData/Character/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/Character/#characterupwardboost",
            "text": "(void)Character.UpwardBoost:(float)boost \nUndocumented",
            "title": "Character.UpwardBoost"
        },
        {
            "location": "/gameData/Character/#charactersetinvincible",
            "text": "(void)Character.SetInvincible:(float)duration \nUndocumented",
            "title": "Character.SetInvincible"
        },
        {
            "location": "/gameData/Character/#characterknock",
            "text": "(void)Character.Knock:(float)strengh x:(float)x y:(float)y z:(float)z \nknock the creature, impose a locomotion force that cannot be opposed with conscient locomotion (like walking)\n            all you need is strengh and origin",
            "title": "Character.Knock"
        },
        {
            "location": "/gameData/Character/#arguments",
            "text": "float strengh :   float x :   float y :   float z :",
            "title": "Arguments"
        },
        {
            "location": "/gameData/Character/#returns",
            "text": "N/A",
            "title": "Returns"
        },
        {
            "location": "/gameData/brain/",
            "text": "brain\n\n\nVariables\n\n\nbrain.settings\n\n\nint brain.settings\n\n\nFlag int that defines brain settings, to use a flag int, just sum all the options you want for the setting and set it as the code\n\n\n        exemple : the target must be sane and alive, ergo we exclude the insanes and the dead : 2 + 8 = 10\n\n        *ExcludeSane = 1;\n        *ExcludeInsane = 2;\n        *ExcludeAlive = 4;\n        *ExcludeDead = 8;\n\n\n\nbrain.playerDist\n\n\nfloat brain.playerDist\n\n\nDistance to closest player.\n\n\nbrain.playerFront\n\n\nfloat brain.playerFront\n\n\nDot to closest player. 1 is in front of brain -1 is back\n\n\nbrain.playerLateral\n\n\nfloat brain.playerLateral\n\n\nDistance to closest player on the lateral axis. Meaning how far on the left or the right\n\n\nbrain.playerVertical\n\n\nfloat brain.playerVertical\n\n\nDistance to closest player on the vertical axis. Positive is above, negative is below\n\n\nbrain.bestAttack\n\n\nint brain.bestAttack\n\n\nGet an identifier to the best attack processed by the brain, you may the use this value to trigger an attack on the attack gamedata\n\n\nStats\n\n\nMessage",
            "title": "brain"
        },
        {
            "location": "/gameData/brain/#brain",
            "text": "",
            "title": "brain"
        },
        {
            "location": "/gameData/brain/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/brain/#brainsettings",
            "text": "int brain.settings  Flag int that defines brain settings, to use a flag int, just sum all the options you want for the setting and set it as the code          exemple : the target must be sane and alive, ergo we exclude the insanes and the dead : 2 + 8 = 10\n\n        *ExcludeSane = 1;\n        *ExcludeInsane = 2;\n        *ExcludeAlive = 4;\n        *ExcludeDead = 8;",
            "title": "brain.settings"
        },
        {
            "location": "/gameData/brain/#brainplayerdist",
            "text": "float brain.playerDist  Distance to closest player.",
            "title": "brain.playerDist"
        },
        {
            "location": "/gameData/brain/#brainplayerfront",
            "text": "float brain.playerFront  Dot to closest player. 1 is in front of brain -1 is back",
            "title": "brain.playerFront"
        },
        {
            "location": "/gameData/brain/#brainplayerlateral",
            "text": "float brain.playerLateral  Distance to closest player on the lateral axis. Meaning how far on the left or the right",
            "title": "brain.playerLateral"
        },
        {
            "location": "/gameData/brain/#brainplayervertical",
            "text": "float brain.playerVertical  Distance to closest player on the vertical axis. Positive is above, negative is below",
            "title": "brain.playerVertical"
        },
        {
            "location": "/gameData/brain/#brainbestattack",
            "text": "int brain.bestAttack  Get an identifier to the best attack processed by the brain, you may the use this value to trigger an attack on the attack gamedata",
            "title": "brain.bestAttack"
        },
        {
            "location": "/gameData/brain/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/brain/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/weakness/",
            "text": "weakness\n\n\nVariables\n\n\nweakness.vulnerable\n\n\nbool weakness.vulnerable\n\n\nUndocumented\n\n\nStats\n\n\nMessage",
            "title": "weakness"
        },
        {
            "location": "/gameData/weakness/#weakness",
            "text": "",
            "title": "weakness"
        },
        {
            "location": "/gameData/weakness/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/weakness/#weaknessvulnerable",
            "text": "bool weakness.vulnerable  Undocumented",
            "title": "weakness.vulnerable"
        },
        {
            "location": "/gameData/weakness/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/weakness/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/legs/",
            "text": "legs\n\n\nVariables\n\n\nlegs.isStopped\n\n\nbool legs.isStopped\n\n\nWhether the creature is stopped or not\n\n\nStats\n\n\nlegs.speed\n\n\nfloat legs.speed\n\n\nMoving speed.\n\n\nlegs.knockDamp\n\n\nfloat legs.knockDamp\n\n\nthe rate at which a knockforce is reduced.\n\n\nMessage\n\n\nlegs.MoveRight\n\n\n(void)legs.MoveRight\n\nUndocumented\n\n\nlegs.Turn\n\n\n(void)legs.Turn:(float)angle\n\nTurns the facing direction of @angle degrees\n\n\nArguments\n\n\nfloat angle\n: \n\n\nReturns\n\n\nN/A\n\n\nlegs.Stop\n\n\n(void)legs.Stop\n\nUndocumented\n\n\nlegs.Resume\n\n\n(void)legs.Resume\n\nUndocumented\n\n\nlegs.Jump\n\n\n(void)legs.Jump:(float)strengh\n\nMake the creature jump, please check that a rigidbody is there and has UseGravity enabled\n\n\nArguments\n\n\nfloat strengh\n: \n\n\nReturns\n\n\nN/A\n\n\nlegs.Knock\n\n\n(void)legs.Knock:(float)strengh x:(float)x y:(float)y z:(float)z\n\nknock the creature, impose a locomotion force that cannot be opposed with conscient locomotion (like walking)\n            all you need is strengh and origin\n\n\nArguments\n\n\nfloat strengh\n: \n\n\nfloat x\n: \n\n\nfloat y\n: \n\n\nfloat z\n: \n\n\nReturns\n\n\nN/A",
            "title": "legs"
        },
        {
            "location": "/gameData/legs/#legs",
            "text": "",
            "title": "legs"
        },
        {
            "location": "/gameData/legs/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/legs/#legsisstopped",
            "text": "bool legs.isStopped  Whether the creature is stopped or not",
            "title": "legs.isStopped"
        },
        {
            "location": "/gameData/legs/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/legs/#legsspeed",
            "text": "float legs.speed  Moving speed.",
            "title": "legs.speed"
        },
        {
            "location": "/gameData/legs/#legsknockdamp",
            "text": "float legs.knockDamp  the rate at which a knockforce is reduced.",
            "title": "legs.knockDamp"
        },
        {
            "location": "/gameData/legs/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/legs/#legsmoveright",
            "text": "(void)legs.MoveRight \nUndocumented",
            "title": "legs.MoveRight"
        },
        {
            "location": "/gameData/legs/#legsturn",
            "text": "(void)legs.Turn:(float)angle \nTurns the facing direction of @angle degrees",
            "title": "legs.Turn"
        },
        {
            "location": "/gameData/legs/#arguments",
            "text": "float angle :",
            "title": "Arguments"
        },
        {
            "location": "/gameData/legs/#returns",
            "text": "N/A",
            "title": "Returns"
        },
        {
            "location": "/gameData/legs/#legsstop",
            "text": "(void)legs.Stop \nUndocumented",
            "title": "legs.Stop"
        },
        {
            "location": "/gameData/legs/#legsresume",
            "text": "(void)legs.Resume \nUndocumented",
            "title": "legs.Resume"
        },
        {
            "location": "/gameData/legs/#legsjump",
            "text": "(void)legs.Jump:(float)strengh \nMake the creature jump, please check that a rigidbody is there and has UseGravity enabled",
            "title": "legs.Jump"
        },
        {
            "location": "/gameData/legs/#arguments_1",
            "text": "float strengh :",
            "title": "Arguments"
        },
        {
            "location": "/gameData/legs/#returns_1",
            "text": "N/A",
            "title": "Returns"
        },
        {
            "location": "/gameData/legs/#legsknock",
            "text": "(void)legs.Knock:(float)strengh x:(float)x y:(float)y z:(float)z \nknock the creature, impose a locomotion force that cannot be opposed with conscient locomotion (like walking)\n            all you need is strengh and origin",
            "title": "legs.Knock"
        },
        {
            "location": "/gameData/legs/#arguments_2",
            "text": "float strengh :   float x :   float y :   float z :",
            "title": "Arguments"
        },
        {
            "location": "/gameData/legs/#returns_2",
            "text": "N/A",
            "title": "Returns"
        },
        {
            "location": "/gameData/throw/",
            "text": "throw\n\n\nVariables\n\n\nthrow.strengh\n\n\nfloat throw.strengh\n\n\nUndocumented\n\n\nthrow.angle\n\n\nfloat throw.angle\n\n\nUndocumented\n\n\nthrow.gravity\n\n\nbool throw.gravity\n\n\nUndocumented\n\n\nthrow.drag\n\n\nfloat throw.drag\n\n\nUndocumented\n\n\nthrow.use\n\n\nbool throw.use\n\n\nUndocumented\n\n\nStats\n\n\nMessage\n\n\nthrow.throw\n\n\n(void)throw.throw\n\nUndocumented",
            "title": "throw"
        },
        {
            "location": "/gameData/throw/#throw",
            "text": "",
            "title": "throw"
        },
        {
            "location": "/gameData/throw/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/throw/#throwstrengh",
            "text": "float throw.strengh  Undocumented",
            "title": "throw.strengh"
        },
        {
            "location": "/gameData/throw/#throwangle",
            "text": "float throw.angle  Undocumented",
            "title": "throw.angle"
        },
        {
            "location": "/gameData/throw/#throwgravity",
            "text": "bool throw.gravity  Undocumented",
            "title": "throw.gravity"
        },
        {
            "location": "/gameData/throw/#throwdrag",
            "text": "float throw.drag  Undocumented",
            "title": "throw.drag"
        },
        {
            "location": "/gameData/throw/#throwuse",
            "text": "bool throw.use  Undocumented",
            "title": "throw.use"
        },
        {
            "location": "/gameData/throw/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/throw/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/throw/#throwthrow",
            "text": "(void)throw.throw \nUndocumented",
            "title": "throw.throw"
        },
        {
            "location": "/gameData/health/",
            "text": "health\n\n\nVariables\n\n\nhealth.current\n\n\nint health.current\n\n\nThe current state of the bar, ergo, how many points you have for that stat\n\n\nStats\n\n\nhealth.rate\n\n\nfloat health.rate\n\n\nGame Stat that affect the bar over time, \n            positive Regen is a continuous recover\n            negative is meant for continuous damage\n\n\nhealth.capacity\n\n\nfloat health.capacity\n\n\nGame Stat that affect the total number of points for that stat\n\n\nMessage\n\n\nhealth.damage\n\n\n(void)health.damage:(int)amount\n\nApply damages: remove the amount.\n\n\nArguments\n\n\nint amount\n: Amount of damages to apply.\n\n\nReturns\n\n\nN/A\n\n\nhealth.burst\n\n\n(bool)health.burst:(float)amount\n\nTry to remove a value.\n\n\nArguments\n\n\nfloat amount\n: Amount to remove\n\n\nReturns\n\n\nTrue if succeeded to remove (that is there's enough quantity to remove).\n\n\nhealth.recover\n\n\n(void)health.recover:(int)amount\n\nRecover the stat by the amount specified\n\n\nArguments\n\n\nint amount\n: amount to recover\n\n\nReturns\n\n\nN/A",
            "title": "health"
        },
        {
            "location": "/gameData/health/#health",
            "text": "",
            "title": "health"
        },
        {
            "location": "/gameData/health/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/health/#healthcurrent",
            "text": "int health.current  The current state of the bar, ergo, how many points you have for that stat",
            "title": "health.current"
        },
        {
            "location": "/gameData/health/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/health/#healthrate",
            "text": "float health.rate  Game Stat that affect the bar over time, \n            positive Regen is a continuous recover\n            negative is meant for continuous damage",
            "title": "health.rate"
        },
        {
            "location": "/gameData/health/#healthcapacity",
            "text": "float health.capacity  Game Stat that affect the total number of points for that stat",
            "title": "health.capacity"
        },
        {
            "location": "/gameData/health/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/health/#healthdamage",
            "text": "(void)health.damage:(int)amount \nApply damages: remove the amount.",
            "title": "health.damage"
        },
        {
            "location": "/gameData/health/#arguments",
            "text": "int amount : Amount of damages to apply.",
            "title": "Arguments"
        },
        {
            "location": "/gameData/health/#returns",
            "text": "N/A",
            "title": "Returns"
        },
        {
            "location": "/gameData/health/#healthburst",
            "text": "(bool)health.burst:(float)amount \nTry to remove a value.",
            "title": "health.burst"
        },
        {
            "location": "/gameData/health/#arguments_1",
            "text": "float amount : Amount to remove",
            "title": "Arguments"
        },
        {
            "location": "/gameData/health/#returns_1",
            "text": "True if succeeded to remove (that is there's enough quantity to remove).",
            "title": "Returns"
        },
        {
            "location": "/gameData/health/#healthrecover",
            "text": "(void)health.recover:(int)amount \nRecover the stat by the amount specified",
            "title": "health.recover"
        },
        {
            "location": "/gameData/health/#arguments_2",
            "text": "int amount : amount to recover",
            "title": "Arguments"
        },
        {
            "location": "/gameData/health/#returns_2",
            "text": "N/A",
            "title": "Returns"
        },
        {
            "location": "/gameData/Oxygen/",
            "text": "Oxygen\n\n\nVariables\n\n\nStats\n\n\nMessage",
            "title": "Oxygen"
        },
        {
            "location": "/gameData/Oxygen/#oxygen",
            "text": "",
            "title": "Oxygen"
        },
        {
            "location": "/gameData/Oxygen/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/Oxygen/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/Oxygen/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/skills/",
            "text": "skills\n\n\nVariables\n\n\nStats\n\n\nMessage\n\n\nskills.inflictall\n\n\n(void)skills.inflictall:(string)key\n\nUndocumented\n\n\nskills.inflict\n\n\n(void)skills.inflict:(int)slot key:(string)key\n\nusing a key effect, the ailement will be given to a slot specific skill\n\n\nArguments\n\n\nint slot\n: \n\n\nstring key\n: \n\n\nReturns\n\n\nN/A",
            "title": "skills"
        },
        {
            "location": "/gameData/skills/#skills",
            "text": "",
            "title": "skills"
        },
        {
            "location": "/gameData/skills/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/skills/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/skills/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/skills/#skillsinflictall",
            "text": "(void)skills.inflictall:(string)key \nUndocumented",
            "title": "skills.inflictall"
        },
        {
            "location": "/gameData/skills/#skillsinflict",
            "text": "(void)skills.inflict:(int)slot key:(string)key \nusing a key effect, the ailement will be given to a slot specific skill",
            "title": "skills.inflict"
        },
        {
            "location": "/gameData/skills/#arguments",
            "text": "int slot :   string key :",
            "title": "Arguments"
        },
        {
            "location": "/gameData/skills/#returns",
            "text": "N/A",
            "title": "Returns"
        },
        {
            "location": "/gameData/stamina/",
            "text": "stamina\n\n\nVariables\n\n\nstamina.current\n\n\nint stamina.current\n\n\nThe current state of the bar, ergo, how many points you have for that stat\n\n\nStats\n\n\nstamina.rate\n\n\nfloat stamina.rate\n\n\nGame Stat that affect the bar over time, \n            positive Regen is a continuous recover\n            negative is meant for continuous damage\n\n\nstamina.capacity\n\n\nfloat stamina.capacity\n\n\nGame Stat that affect the total number of points for that stat\n\n\nMessage\n\n\nstamina.damage\n\n\n(void)stamina.damage:(int)amount\n\nApply damages: remove the amount.\n\n\nArguments\n\n\nint amount\n: Amount of damages to apply.\n\n\nReturns\n\n\nN/A\n\n\nstamina.burst\n\n\n(bool)stamina.burst:(float)amount\n\nTry to remove a value.\n\n\nArguments\n\n\nfloat amount\n: Amount to remove\n\n\nReturns\n\n\nTrue if succeeded to remove (that is there's enough quantity to remove).\n\n\nstamina.recover\n\n\n(void)stamina.recover:(int)amount\n\nRecover the stat by the amount specified\n\n\nArguments\n\n\nint amount\n: amount to recover\n\n\nReturns\n\n\nN/A",
            "title": "stamina"
        },
        {
            "location": "/gameData/stamina/#stamina",
            "text": "",
            "title": "stamina"
        },
        {
            "location": "/gameData/stamina/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/stamina/#staminacurrent",
            "text": "int stamina.current  The current state of the bar, ergo, how many points you have for that stat",
            "title": "stamina.current"
        },
        {
            "location": "/gameData/stamina/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/stamina/#staminarate",
            "text": "float stamina.rate  Game Stat that affect the bar over time, \n            positive Regen is a continuous recover\n            negative is meant for continuous damage",
            "title": "stamina.rate"
        },
        {
            "location": "/gameData/stamina/#staminacapacity",
            "text": "float stamina.capacity  Game Stat that affect the total number of points for that stat",
            "title": "stamina.capacity"
        },
        {
            "location": "/gameData/stamina/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/stamina/#staminadamage",
            "text": "(void)stamina.damage:(int)amount \nApply damages: remove the amount.",
            "title": "stamina.damage"
        },
        {
            "location": "/gameData/stamina/#arguments",
            "text": "int amount : Amount of damages to apply.",
            "title": "Arguments"
        },
        {
            "location": "/gameData/stamina/#returns",
            "text": "N/A",
            "title": "Returns"
        },
        {
            "location": "/gameData/stamina/#staminaburst",
            "text": "(bool)stamina.burst:(float)amount \nTry to remove a value.",
            "title": "stamina.burst"
        },
        {
            "location": "/gameData/stamina/#arguments_1",
            "text": "float amount : Amount to remove",
            "title": "Arguments"
        },
        {
            "location": "/gameData/stamina/#returns_1",
            "text": "True if succeeded to remove (that is there's enough quantity to remove).",
            "title": "Returns"
        },
        {
            "location": "/gameData/stamina/#staminarecover",
            "text": "(void)stamina.recover:(int)amount \nRecover the stat by the amount specified",
            "title": "stamina.recover"
        },
        {
            "location": "/gameData/stamina/#arguments_2",
            "text": "int amount : amount to recover",
            "title": "Arguments"
        },
        {
            "location": "/gameData/stamina/#returns_2",
            "text": "N/A",
            "title": "Returns"
        },
        {
            "location": "/gameData/World/",
            "text": "World\n\n\nVariables\n\n\nWorld.ground\n\n\nbool World.ground\n\n\nWhether has a ground under.\n\n\nWorld.wallLeft\n\n\nbool World.wallLeft\n\n\nCheck if has a wall on left.\n\n\nWorld.wallRight\n\n\nbool World.wallRight\n\n\nHas wall on the right.\n\n\nWorld.ceil\n\n\nbool World.ceil\n\n\nHas ceiling.\n\n\nStats\n\n\nMessage\n\n\nWorld.addLayer\n\n\n(void)World.addLayer:(string)layerName\n\nWill add the specified layer to the world detection, meaning the world knowledge will be able to detect collison from that layer\n\n\nArguments\n\n\nstring layerName\n: The name of the layer to Add\n\n\nReturns\n\n\nN/A\n\n\nWorld.removeLayer\n\n\n(void)World.removeLayer:(string)layerName\n\nWill remove the specified layer from the world detection, meaning the world knowledge will not be able to detect collison from that layer\n\n\nArguments\n\n\nstring layerName\n: The name of the layer to Add\n\n\nReturns\n\n\nN/A\n\n\nWorld.resetMask\n\n\n(void)World.resetMask\n\nUndocumented",
            "title": "World"
        },
        {
            "location": "/gameData/World/#world",
            "text": "",
            "title": "World"
        },
        {
            "location": "/gameData/World/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/World/#worldground",
            "text": "bool World.ground  Whether has a ground under.",
            "title": "World.ground"
        },
        {
            "location": "/gameData/World/#worldwallleft",
            "text": "bool World.wallLeft  Check if has a wall on left.",
            "title": "World.wallLeft"
        },
        {
            "location": "/gameData/World/#worldwallright",
            "text": "bool World.wallRight  Has wall on the right.",
            "title": "World.wallRight"
        },
        {
            "location": "/gameData/World/#worldceil",
            "text": "bool World.ceil  Has ceiling.",
            "title": "World.ceil"
        },
        {
            "location": "/gameData/World/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/World/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/World/#worldaddlayer",
            "text": "(void)World.addLayer:(string)layerName \nWill add the specified layer to the world detection, meaning the world knowledge will be able to detect collison from that layer",
            "title": "World.addLayer"
        },
        {
            "location": "/gameData/World/#arguments",
            "text": "string layerName : The name of the layer to Add",
            "title": "Arguments"
        },
        {
            "location": "/gameData/World/#returns",
            "text": "N/A",
            "title": "Returns"
        },
        {
            "location": "/gameData/World/#worldremovelayer",
            "text": "(void)World.removeLayer:(string)layerName \nWill remove the specified layer from the world detection, meaning the world knowledge will not be able to detect collison from that layer",
            "title": "World.removeLayer"
        },
        {
            "location": "/gameData/World/#arguments_1",
            "text": "string layerName : The name of the layer to Add",
            "title": "Arguments"
        },
        {
            "location": "/gameData/World/#returns_1",
            "text": "N/A",
            "title": "Returns"
        },
        {
            "location": "/gameData/World/#worldresetmask",
            "text": "(void)World.resetMask \nUndocumented",
            "title": "World.resetMask"
        },
        {
            "location": "/gameData/navigation/",
            "text": "navigation\n\n\nVariables\n\n\nStats\n\n\nnavigation.Gravity\n\n\nfloat navigation.Gravity\n\n\nUndocumented\n\n\nnavigation.Motion\n\n\nfloat navigation.Motion\n\n\nUndocumented\n\n\nnavigation.KnockDamp\n\n\nfloat navigation.KnockDamp\n\n\nUndocumented\n\n\nMessage\n\n\nnavigation.Knock\n\n\n(void)navigation.Knock:(float)strengh x:(float)x y:(float)y z:(float)z\n\nknock the creature, impose a locomotion force that cannot be opposed with conscient locomotion (like walking)\n            all you need is strengh and origin\n\n\nArguments\n\n\nfloat strengh\n: \n\n\nfloat x\n: \n\n\nfloat y\n: \n\n\nfloat z\n: \n\n\nReturns\n\n\nN/A",
            "title": "navigation"
        },
        {
            "location": "/gameData/navigation/#navigation",
            "text": "",
            "title": "navigation"
        },
        {
            "location": "/gameData/navigation/#variables",
            "text": "",
            "title": "Variables"
        },
        {
            "location": "/gameData/navigation/#stats",
            "text": "",
            "title": "Stats"
        },
        {
            "location": "/gameData/navigation/#navigationgravity",
            "text": "float navigation.Gravity  Undocumented",
            "title": "navigation.Gravity"
        },
        {
            "location": "/gameData/navigation/#navigationmotion",
            "text": "float navigation.Motion  Undocumented",
            "title": "navigation.Motion"
        },
        {
            "location": "/gameData/navigation/#navigationknockdamp",
            "text": "float navigation.KnockDamp  Undocumented",
            "title": "navigation.KnockDamp"
        },
        {
            "location": "/gameData/navigation/#message",
            "text": "",
            "title": "Message"
        },
        {
            "location": "/gameData/navigation/#navigationknock",
            "text": "(void)navigation.Knock:(float)strengh x:(float)x y:(float)y z:(float)z \nknock the creature, impose a locomotion force that cannot be opposed with conscient locomotion (like walking)\n            all you need is strengh and origin",
            "title": "navigation.Knock"
        },
        {
            "location": "/gameData/navigation/#arguments",
            "text": "float strengh :   float x :   float y :   float z :",
            "title": "Arguments"
        },
        {
            "location": "/gameData/navigation/#returns",
            "text": "N/A",
            "title": "Returns"
        }
    ]
}